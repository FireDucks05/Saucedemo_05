{"uid":"707efab0ab370a94","name":"Positive login","fullName":"tests.test_login.TestAuthorizationClass#test_login_positive","historyId":"56177ca3694f3c8dc1ef85f571aabc79","time":{"start":1669086986075,"stop":1669086986075,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5581b3059463 <unknown>\n#1 0x5581b2e1d8d8 <unknown>\n#2 0x5581b2e45b6a <unknown>\n#3 0x5581b2e40c05 <unknown>\n#4 0x5581b2e84802 <unknown>\n#5 0x5581b2e842af <unknown>\n#6 0x5581b2e7c443 <unknown>\n#7 0x5581b2e4d3c5 <unknown>\n#8 0x5581b2e4e531 <unknown>\n#9 0x5581b30abdce <unknown>\n#10 0x5581b30af192 <unknown>\n#11 0x5581b309093e <unknown>\n#12 0x5581b30b0103 <unknown>\n#13 0x5581b3083d85 <unknown>\n#14 0x5581b30d10a8 <unknown>\n#15 0x5581b30d1239 <unknown>\n#16 0x5581b30ec492 <unknown>\n#17 0x7ff632dbdb43 <unknown>","statusTrace":"request = <SubRequest 'browser' for <Function test_login_positive[problem_user]>>\nheadless = False\n\n    @pytest.fixture(autouse=True)\n    def browser(request, headless):\n        browser = request.config.getoption(\"--launch\")\n        if browser == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            options.add_argument(\"--window-size=1600,1080\")\n            options.headless = headless\n    \n            browser = webdriver.Firefox(FirefoxService(GeckoDriverManager().install()), options=options\n            )\n            yield browser\n            browser.quit()\n        else:\n    \n            options = webdriver.ChromeOptions()\n            options.add_argument(\"--window-size=1600,1080\")\n            options.headless = headless\n            logging.info('start logs')\n>           browser = webdriver.Chrome(ChromeDriverManager().install(), options=options\n            )\n\nconftest.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py:81: in __init__\n    super().__init__(\n.venv/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py:106: in __init__\n    super().__init__(\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:288: in __init__\n    self.start_session(capabilities, browser_profile)\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:381: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa2373fc4f0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...\\\\n#15 0x5581b30d1239 \\\\u003Cunknown>\\\\n#16 0x5581b30ec492 \\\\u003Cunknown>\\\\n#17 0x7ff632dbdb43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x5581b3059463 <unknown>\nE       #1 0x5581b2e1d8d8 <unknown>\nE       #2 0x5581b2e45b6a <unknown>\nE       #3 0x5581b2e40c05 <unknown>\nE       #4 0x5581b2e84802 <unknown>\nE       #5 0x5581b2e842af <unknown>\nE       #6 0x5581b2e7c443 <unknown>\nE       #7 0x5581b2e4d3c5 <unknown>\nE       #8 0x5581b2e4e531 <unknown>\nE       #9 0x5581b30abdce <unknown>\nE       #10 0x5581b30af192 <unknown>\nE       #11 0x5581b309093e <unknown>\nE       #12 0x5581b30b0103 <unknown>\nE       #13 0x5581b3083d85 <unknown>\nE       #14 0x5581b30d10a8 <unknown>\nE       #15 0x5581b30d1239 <unknown>\nE       #16 0x5581b30ec492 <unknown>\nE       #17 0x7ff632dbdb43 <unknown>\n\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:249: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"headless","time":{"start":1669086980970,"stop":1669086980970,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser","time":{"start":1669086986075,"stop":1669086986854,"duration":779},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5581b3059463 <unknown>\n#1 0x5581b2e1d8d8 <unknown>\n#2 0x5581b2e45b6a <unknown>\n#3 0x5581b2e40c05 <unknown>\n#4 0x5581b2e84802 <unknown>\n#5 0x5581b2e842af <unknown>\n#6 0x5581b2e7c443 <unknown>\n#7 0x5581b2e4d3c5 <unknown>\n#8 0x5581b2e4e531 <unknown>\n#9 0x5581b30abdce <unknown>\n#10 0x5581b30af192 <unknown>\n#11 0x5581b309093e <unknown>\n#12 0x5581b30b0103 <unknown>\n#13 0x5581b3083d85 <unknown>\n#14 0x5581b30d10a8 <unknown>\n#15 0x5581b30d1239 <unknown>\n#16 0x5581b30ec492 <unknown>\n#17 0x7ff632dbdb43 <unknown>\n\n","statusTrace":"  File \"/home/runner/work/Saucedemo_05/Saucedemo_05/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/Saucedemo_05/Saucedemo_05/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/Saucedemo_05/Saucedemo_05/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 900, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/home/runner/work/Saucedemo_05/Saucedemo_05/conftest.py\", line 29, in browser\n    browser = webdriver.Chrome(ChromeDriverManager().install(), options=options\n  File \"/home/runner/work/Saucedemo_05/Saucedemo_05/.venv/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py\", line 81, in __init__\n    super().__init__(\n  File \"/home/runner/work/Saucedemo_05/Saucedemo_05/.venv/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py\", line 106, in __init__\n    super().__init__(\n  File \"/home/runner/work/Saucedemo_05/Saucedemo_05/.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 288, in __init__\n    self.start_session(capabilities, browser_profile)\n  File \"/home/runner/work/Saucedemo_05/Saucedemo_05/.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 381, in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n  File \"/home/runner/work/Saucedemo_05/Saucedemo_05/.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/work/Saucedemo_05/Saucedemo_05/.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"afterStages":[],"labels":[{"name":"story","value":"US_001.00"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestAuthorizationClass"},{"name":"host","value":"fv-az173-27"},{"name":"thread","value":"2661-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"'secret_sauce'"},{"name":"user","value":"'problem_user'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"f8467289d8ae727f","reportUrl":"https://FireDucks05.github.io/Saucedemo_05/51//#testresult/f8467289d8ae727f","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5576ac245463 <unknown>\n#1 0x5576ac0098d8 <unknown>\n#2 0x5576ac031b6a <unknown>\n#3 0x5576ac02cc05 <unknown>\n#4 0x5576ac070802 <unknown>\n#5 0x5576ac0702af <unknown>\n#6 0x5576ac068443 <unknown>\n#7 0x5576ac0393c5 <unknown>\n#8 0x5576ac03a531 <unknown>\n#9 0x5576ac297dce <unknown>\n#10 0x5576ac29b192 <unknown>\n#11 0x5576ac27c93e <unknown>\n#12 0x5576ac29c103 <unknown>\n#13 0x5576ac26fd85 <unknown>\n#14 0x5576ac2bd0a8 <unknown>\n#15 0x5576ac2bd239 <unknown>\n#16 0x5576ac2d8492 <unknown>\n#17 0x7fc4742e2b43 <unknown>","time":{"start":1669086347034,"stop":1669086347034,"duration":0}}]},"tags":[]},"source":"707efab0ab370a94.json","parameterValues":["'secret_sauce'","'problem_user'"]}